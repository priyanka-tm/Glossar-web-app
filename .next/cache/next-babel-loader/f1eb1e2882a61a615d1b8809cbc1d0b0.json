{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchProductIdCartData, addCartData, updateCartData, removeCartData } from \"../apis/cart\";\nexport const onAddProductToCart = ({\n  product,\n  quantity = 1,\n  onSuccess,\n  onError,\n  getQuantityAvailable = () => true\n}) => {\n  console.log('product: ', product);\n  fetchProductIdCartData(product.id).then(res => {\n    console.log('res:========= ', res);\n\n    if (res.data.length === 0) {\n      if (product.quantity === 0) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable && getQuantityAvailable(false);\n      } else {\n        addCartData(_objectSpread(_objectSpread({}, product), {}, {\n          id: uuidv4(),\n          productId: product.id,\n          cartQuantity: quantity\n        })).then(res => onSuccess && onSuccess(res)).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n      }\n    } else {\n      let pData = res.data[0];\n\n      if (pData.cartQuantity + quantity > pData.quantity) {\n        onError && onError(\"Reached maximum number of products\");\n        getQuantityAvailable(false);\n      } else {\n        updateCartData(pData.id, {\n          cartQuantity: pData.cartQuantity + quantity\n        }).then(res => {\n          onSuccess && onSuccess(res);\n        }).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n      }\n    }\n  }).catch(err => onError && onError(\"Add product to cart failed, please try again\", err));\n};\nexport const onRemoveProductFromCart = ({\n  cartId,\n  onSuccess,\n  onError\n}) => {\n  if (cartId && cartId !== \"\" && cartId !== null) {\n    removeCartData(cartId).then(res => onSuccess && onSuccess(res)).catch(err => onError && onError(\"Remove product failm, pleaser try again\", err));\n  }\n};\nexport const onChangeProductCartQuantity = ({\n  product,\n  quantity,\n  onSuccess\n}) => {\n  if (quantity > product.quantity || quantity < 1) {\n    return;\n  }\n\n  updateCartData(product.id, {\n    cartQuantity: quantity\n  }).then(res => onSuccess && onSuccess(res)).catch(err => console.log(err));\n};","map":{"version":3,"sources":["E:/clg-project/Glossar-web-app/src/common/cartServices.js"],"names":["v4","uuidv4","fetchProductIdCartData","addCartData","updateCartData","removeCartData","onAddProductToCart","product","quantity","onSuccess","onError","getQuantityAvailable","console","log","id","then","res","data","length","productId","cartQuantity","catch","err","pData","onRemoveProductFromCart","cartId","onChangeProductCartQuantity"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  fetchProductIdCartData,\r\n  addCartData,\r\n  updateCartData,\r\n  removeCartData,\r\n} from \"../apis/cart\";\r\n\r\nexport const onAddProductToCart = ({\r\n  product,\r\n  quantity = 1,\r\n  onSuccess,\r\n  onError,\r\n  getQuantityAvailable = () => true,\r\n}) => {\r\n  console.log('product: ', product);\r\n  fetchProductIdCartData(product.id)\r\n    .then((res) => {\r\n      console.log('res:========= ', res);\r\n      if (res.data.length === 0) {\r\n        if (product.quantity === 0) {\r\n          onError && onError(\"Reached maximum number of products\");\r\n          getQuantityAvailable && getQuantityAvailable(false);\r\n        } else {\r\n          addCartData({\r\n            \r\n            ...product,\r\n            id: uuidv4(),\r\n            productId: product.id,\r\n            cartQuantity: quantity,\r\n          })\r\n            .then((res) => onSuccess && onSuccess(res))\r\n            .catch(\r\n              (err) =>\r\n                onError &&\r\n                onError(\"Add product to cart failed, please try again\", err)\r\n            );\r\n        }\r\n      } else {\r\n        let pData = res.data[0];\r\n        if (pData.cartQuantity + quantity > pData.quantity) {\r\n          onError && onError(\"Reached maximum number of products\");\r\n          getQuantityAvailable(false);\r\n        } else {\r\n          updateCartData(pData.id, {\r\n            cartQuantity: pData.cartQuantity + quantity,\r\n          })\r\n            .then((res) => {\r\n              onSuccess && onSuccess(res);\r\n            })\r\n            .catch(\r\n              (err) =>\r\n                onError &&\r\n                onError(\"Add product to cart failed, please try again\", err)\r\n            );\r\n        }\r\n      }\r\n    })\r\n    .catch(\r\n      (err) =>\r\n        onError && onError(\"Add product to cart failed, please try again\", err)\r\n    );\r\n};\r\n\r\nexport const onRemoveProductFromCart = ({ cartId, onSuccess, onError }) => {\r\n  if (cartId && cartId !== \"\" && cartId !== null) {\r\n    removeCartData(cartId)\r\n      .then((res) => onSuccess && onSuccess(res))\r\n      .catch(\r\n        (err) =>\r\n          onError && onError(\"Remove product failm, pleaser try again\", err)\r\n      );\r\n  }\r\n};\r\n\r\nexport const onChangeProductCartQuantity = ({\r\n  product,\r\n  quantity,\r\n  onSuccess,\r\n}) => {\r\n  if (quantity > product.quantity || quantity < 1) {\r\n    return;\r\n  }\r\n  updateCartData(product.id, { cartQuantity: quantity })\r\n    .then((res) => onSuccess && onSuccess(res))\r\n    .catch((err) => console.log(err));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}